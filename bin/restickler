#!/usr/bin/env bash
#
# Quinn Comendant <quinn@strangecode.com>
# 2021-12-21 21:35:38
# shellcheck disable=SC1111

set -o pipefail;
set -o errexit;
set -o errtrace;
set -o nounset;
set -o noclobber;

restickler_version='1.3.5';
script_start_time=$(date +%s);

c_violet="\033[35m";
c_bold="\033[1m";
c_off="\033[0m";

# Auxiliary files are located as per XDG Base Directory specifications:
# https://wiki.archlinux.org/title/XDG_Base_Directory#User_directories
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/restickler";
state_dir="${XDG_STATE_HOME:-$HOME/.local/state}/restickler";
config_file="${config_dir}/env";
tmp_dir=/tmp;
log_file="${state_dir}/log";
canary_file='';

# Set up required directories.
mkdir -p "${config_dir}/exclude" "$state_dir" "${tmp_dir}/restickler/restore";
touch "$log_file";

# Default configuration options.
tasks_default=(backup restore forget prune check);
tasks=();
dl_limit='';
ul_limit='';
exclude_file="${config_dir}/exclude/default.txt";
dryrun='';
dryrunexec='';
quiet='';
verbose='';
do_check_idle='';
do_check_battery='';
do_check_hotspot='';
do_check_internet='';
backup_interval_hours=0;   # By default, back up every time.
forget_interval_hours=168; # 7 days
prune_interval_hours=240;  # 10 days
check_interval_hours=720;  # 30 days
sent_healthchecks_start='';
allow_auto_unlock='';

#
# Functions
#

function _usage() {
    echo -n "restickler ${restickler_version}

A wrapper for restic (https://restic.net/) that supervises back up, forget, prune, check,
and restore test. Designed for macOS, but works on Linux too.
https://github.com/quinncomendant/restickler
Quinn Comendant <quinn@strangecode.com>

USAGE

    restickler [OPTIONS] SOURCE [SOURCE…]

Back up SOURCE and run maintenance tasks on the configured restic repository.

OPTIONS

    -A                  Abort if there has been no user activity since last back up.
    -B                  Abort if on battery power.
    -b HOURS            Min interval between back up operations (currently every ${backup_interval_hours} hours).
    -C FILE             Path to environment config file (default: ${config_dir}/env).
    -c HOURS            Min interval between check operations (currently every ${check_interval_hours} hours).
    -d MBPS|%           Limit download speed in Mb/s or as a percentage of available bandwidth.
    -e FILE             File containing back up exclusion rules, used as --exclude-file=FILE.
    -f HOURS            Min interval between forget operations (currently every ${forget_interval_hours} hours).
    -H                  Abort if connected to an iOS hotspot.
    -h, --help          Display this help message.
    -I                  Abort if internet is unreliable.
    --allow-auto-unlock Automatically unlock stale repository locks (older than 24h, same host+user, restic not running).
    --install-config    Install example config files (will not overwrite existing files):
                          $config_file
                          ${config_dir}/exclude/default.txt
    -n                  Dry run: print the expected outcome to the screen; don’t actually do anything.
    -p HOURS            Min interval between prune operations (currently every ${prune_interval_hours} hours).
    -q                  Do not output comprehensive progress report.
    --self-update       Download the replace restickler with the latest release from GitHub.
    -t TASK,TASK,…     A list of tasks to complete on SOURCE (default: backup,restore,forget,prune,check)
    -u MBPS|%           Limit upload speed in Mb/s or as a percentage of available bandwidth.
    -v                  Display verbose output (-vv to list uploaded files; -vvv to show debugging output).
    -V, --version       Print version information.

Restickler, by default, runs these commands in sequence to maintain the full lifecycle of a healthy repository:

    1. \`restic backup\` (every ${backup_interval_hours} hours or as specified by -b)
    2. \`restic restore\` (restore test file from SOURCE/.restickler-canary/UTC_DATE_TIME)
    3. \`restic forget\` (every ${forget_interval_hours} hours or as specified by -f)
    4. \`restic prune\` (every ${prune_interval_hours} hours or as specified by -p)
    5. \`restic check\` (every ${check_interval_hours} hours or as specified by -c)

Use \`-t\` to limit which tasks are run, e.g., \`-t backup,restore,forget\` to run only the first three tasks.

GETTING STARTED

    1. Install example config files: \`restickler --install-config\`
    2. Configure environment in \`$config_file\` (see ENVIRONMENT VARIABLES below)
    3. Configure excluded paths in \`${config_dir}/exclude/default.txt\`
    4. Initialize the repo: \`source $config_file && restic init\`
    5. Do back up with \`restickler \$HOME\`

For detailed set-up instructions, see https://github.com/quinncomendant/restickler#set-up

ENVIRONMENT VARIABLES

The following environment variables can be defined in \`$config_file\`, which is
automatically sourced by restickler if it exists. Use \`-C FILE\` to specify a custom env file.

    RESTIC_REPOSITORY               The restic repository to back up to and maintain.
    RESTIC_PASSWORD_COMMAND         The shell command that outputs the repository password.
                                    (Or use RESTIC_PASSWORD, but this is less secure.)
    GOOGLE_APPLICATION_CREDENTIALS  Path to the GCP Service Account credentials file.
    GOOGLE_PROJECT_ID               GCP project ID.
    HEALTHCHECKS_URL                Healthchecks.io URL to ping on success or failure (optional).

The GOOGLE_* variables can be replaced with variables used by your preferred cloud provider;
see https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html

LOGS

Activity is logged to \`${state_dir}/log\`. Use \`-vv\` to record new and modified files.

EXAMPLES

Back up the entire home directory, except files matched by \`${config_dir}/exclude/default.txt\`:

    restickler \$HOME

Back up all Apple Photo libraries, doing back up only, with a custom exclude file:

    restickler -t backup -e ${config_dir}/exclude/photoslibrary.txt \$HOME/Pictures/*.photoslibrary

Force back up, forget, prune, and check to run by setting intervals to 0 (removing
the \`${state_dir}/last-*-time*\` files would also reset the interval timer):

    restickler -b 0 -f 0 -p 0 -c 0 \$HOME

A sane configuration for crontab on macOS: double verbosity to log files as they upload,
skip back up when idle, on battery, using hotspot, or unreliable internet, with upload
and download limited to 75% of available bandwidth (cron needs % to be escaped). Although
it runs every 5 minutes, back up will happen at most only once per hour:

    */5 * * * * restickler -vvABHI -d 75\% -u 75\% -b 1 \$HOME >/dev/null
" | sed "s!${HOME}!~!g" 1>&2
    exit 1;
}

function _install_config() {
    _prompt "Install example config files (\`$config_file\`, \`${config_dir}/exclude/default.txt\`)?" || exit 0;
    if [[ -e "$config_file" ]]; then
        _info "$config_file file already exists; skipping";
    else
        http_code=$(curl -sL -w '%{http_code}' -o "$config_file" "https://raw.githubusercontent.com/quinncomendant/restickler/master/config/env?t=${script_start_time}");
        [[ $http_code == 200 && -s "$config_file" ]] || _error "Failed to install $config_file (HTTP code ${http_code})";
        chmod 600 "$config_file";
        _info "Installed: \`$config_file\` from https://github.com/quinncomendant/restickler/blob/master/config/env";
    fi
    if [[ -e "${config_dir}/exclude/default.txt" ]]; then
        _info "${config_dir}/exclude/default.txt file already exists; skipping";
    else
        http_code=$(curl -sL -w '%{http_code}' -o "${config_dir}/exclude/default.txt" "https://raw.githubusercontent.com/quinncomendant/restickler/master/config/exclude/default.txt?t=${script_start_time}");
        [[ $http_code == 200 && -s "${config_dir}/exclude/default.txt" ]] || _error "Failed to install ${config_dir}/exclude/default.txt (HTTP code ${http_code})";
        _info "Installed: \`${config_dir}/exclude/default.txt\` from https://github.com/quinncomendant/restickler/blob/master/config/exclude/default.txt";
    fi
    exit 0;
}

function _self_update() {
    self=$(readlink -f "$0");
    tmp_dl="${tmp_dir}/restickler-${script_start_time}-$(head -c 100 /dev/urandom | LC_ALL=C tr -dc '0-9A-Za-z')";
    cp -p "$self" "$tmp_dl"; # Copy existing script just to retain permissions.
    restickler_url="https://raw.githubusercontent.com/quinncomendant/restickler/master/bin/restickler?t=${script_start_time}";
    http_code=$(curl -sL -w '%{http_code}' -o "$tmp_dl" "$restickler_url");
    [[ $http_code == 200 && -s "$tmp_dl" ]] || _error "Failed to download ${restickler_url} (HTTP code ${http_code})";
    tmp_version=$(sed -n '/^restickler_version=/s/[^0-9.]//gp' "$tmp_dl" || true);
    if [[ "$restickler_version" == "$tmp_version" ]]; then
        _info "restickler ${restickler_version} is currently the newest version available.";
    elif _prompt "Update restickler from ${restickler_version} to ${tmp_version}?"; then
        $dryrunexec mv "$tmp_dl" "$self" || _error "Failed to replace $self with $tmp_dl";
    fi
    rm -f "$tmp_dl" || true;
    exit 0;
}

function _debug() {
    local IFS='' dt;
    dt=$(date '+%F %T');
    # shellcheck disable=SC2015
    [[ $verbose =~ '-v -v -v' ]] && echo -e "[${dt}] [debug] $*" >> "$log_file" || true;
}

function _info() {
    local IFS='' dt;
    dt=$(date '+%F %T');
    # shellcheck disable=SC2015
    [[ $verbose =~ '-v' ]] && echo -e "[${dt}] [info] $*" >> "$log_file" || true;
    echo -e "${c_violet}[${dt}] ${c_bold}$*${c_off}";
}

function _warning() {
    local IFS='' dt;
    dt=$(date '+%F %T');
    echo -e "[${dt}] [warning] $*" | tee -a "$log_file" 1>&2
}

# USR1 signal is sent by _error to terminate the main script.
trap 'exit 1' USR1;
function _error() {
    local IFS='' dt;
    dt=$(date '+%F %T');
    echo -e "[${dt}] [error] $* ($(_elapsed) elapsed)" | tee -a "$log_file" 1>&2
    # Send “fail” signal to HealthChecks.io when run via cron.
    # shellcheck disable=SC2015
    [[ -z $dryrun && $TERM == 'dumb' && -n ${HEALTHCHECKS_URL:-} ]] && curl -fsS -A "$(hostname -s)" -X POST --data-binary "$*" --retry 3 "${HEALTHCHECKS_URL}/fail" >/dev/null || true;
    # Send a user-defined USR1 signal, which is trapped to exit the main process.
    kill -USR1 $$;
}

function _prompt() {
    local yn;
    read -rp "$* [y/N]: " yn;
    case $yn in
        ([yY]|[yY][eE][sS]) true;;
        (*) false;;
    esac
}

function _todo() {
    local needle=$1;
    for t in "${tasks[@]}"; do
        [[ $t == "$needle" ]] && return 0;
    done;
    return 1;
};

function _elapsed() {
    local d=$((SECONDS/86400));
    local h=$((SECONDS%86400/3600));
    local m=$((SECONDS%3600/60));
    local s=$((SECONDS%60));
    printf '%dd%dh%dm%ds' $d $h $m $s | sed -E 's/(^0d(0h(0m)?)?)?//; s/([^0-9])0h/\1/; s/([^0-9])0m/\1/; s/([^0-9])0s/\1/;';
}

function _online {
    for i in {1..5}; do
        # Return 0 if http response code is in 100-599 range and total response time is less than 1s.
        curl -m 1 -s -o /dev/null -w '%{http_code} %{time_total}' https://storage.googleapis.com/ 2>/dev/null | awk '{exit !($1 ~ /^[12345][0-9][0-9]$/ && $2 < 1)}' && return 0;
        sleep 1;
    done
    # All 5 attempts to connect failed.
    return "$i";
}

function _speedtest() {
    local megabytes=2 concurrency=8 dl_bytes ul_bytes config dl_url ul_url dl_raw dl_bps ul_raw ul_bps;

    # This function relies on curl's parallel transfer functionality.
    curl --parallel --version &>/dev/null || { _warning "Speedtest disabled because curl does not support parallel transfers"; return 1; }

    # cdn-apple.com requires TLS 1.3 support, which is inconsistent across OSs.
    # This command works on macOS and modern Linux distros.
    config=$(curl -s https://mensura.cdn-apple.com/api/v1/gm/config 2>/dev/null || true)

    # This command works on some older Linux that require manually specifying `--tlsv1.3` (e.g., CentOS 7).
    if [[ -z $config ]] && curl --help 2>&1 | grep -q -- '--tlsv1\.3'; then
        config=$(curl --tlsv1.3 -s https://mensura.cdn-apple.com/api/v1/gm/config 2>/dev/null || true)
    fi

    dl_url=$(jq -r '.urls.large_https_download_url // empty' <<<"$config" 2>/dev/null || true);
    ul_url=$(jq -r '.urls.https_upload_url // empty' <<<"$config" 2>/dev/null || true);
    [[ -z $config || -z $dl_url || -z $ul_url ]] && { _warning "Speedtest disabled – failed to connect to mensura.cdn-apple.com (no TLS 1.3 support?)"; return 1; }

    dl_bytes=$((megabytes*1024*1024/concurrency));
    ul_bytes=$((dl_bytes/2)); # UL is accurate using half as much data.

    # Download test in parallel; sum download speeds excluding connection time.
    # shellcheck disable=SC2046
    dl_raw=$(curl -s --fail --parallel --connect-timeout 3 --parallel-immediate -H "Range: bytes=0-${dl_bytes}" -w "(%{size_download} / (%{time_total} - %{time_starttransfer})) +" $(for ((i=1; i<=concurrency; i++)); do echo -n "${dl_url} -o /dev/null "; done) 2>/dev/null || true);
    dl_bps=$(bc <<<"scale=0; (${dl_raw} 0) * 8");

    # Upload random data in parallel; the /slurp endpoint returns json with a BPS value that we sum for the total bytes/second that are transfered during this test.
    # shellcheck disable=SC2046
    ul_raw=$(head -c "$ul_bytes" /dev/random | curl -s --fail --parallel --connect-timeout 3 --parallel-immediate --data-binary '@-' $(for ((i=1; i<=concurrency; i++)); do echo -n "${ul_url} "; done) 2>/dev/null || true);
    # shellcheck disable=SC2015
    ul_bps=$(jq -e . <<<"$ul_raw" &>/dev/null && jq 'reduce inputs.BPS as $n (.; .BPS += ($n * 8)) | .BPS' <<<"$ul_raw" || true);

    # Log how much data speedtest uses, only if the speedtest.log file exists. This is an undocumented feature.
    if [[ -f "${state_dir}/speedtest.log" ]]; then
        printf "%s\t${dl_bps:-0}\t${ul_bps:-0}\t$((megabytes*1024*1024))\t$((megabytes*1024*1024))\n" "$(date '+%F %T')" >> "${state_dir}/speedtest.log" 2>/dev/null || true;
    fi

    # Save a json with the keys we use in the same format used by the networkQuality command.
    # Throughput values are in bits/second.
    echo "{\"dl_responsiveness\": 1000, \"dl_throughput\": ${dl_bps:-0}, \"ul_responsiveness\": 1000, \"ul_throughput\": ${ul_bps:-0}}";
}

function _network_quality() {
    # Return cached internet speed test results
    # The JSON is formatted to use output from macOS's `networkQuality` command (only available on macOS 12+), but that prerequisite has been removed; now speedtest is using only curl.
    local jqfilter=${1:-.};

    if [[ ! -s "${state_dir}/network_quality.json" && ($do_check_internet || $dl_limit == *% || $ul_limit == *%) ]]; then
        # Replace `_speedtest` with `networkQuality -cs` if you want to use the macOS built-in tool.
        _speedtest >| "${state_dir}/network_quality.json";
        # type -P networkQuality >/dev/null && networkQuality -cs >| "${state_dir}/network_quality.json" || true;
        [[ -s "${state_dir}/network_quality.json" ]] && _debug "$(jq -r '"Network DL speed: \(.dl_throughput) UL speed: \(.ul_throughput) UL responsiveness: \(.ul_responsiveness)"' "${state_dir}/network_quality.json")";
    fi

    if [[ ! -s "${state_dir}/network_quality.json" ]]; then
        # No network test results available; assume the network is very fast (1073741824 == 1 GiB/s).
        echo 1073741824;
        return 0;
    fi

    if jq -e . "${state_dir}/network_quality.json" &>/dev/null; then
        # If valid JSON, return requested value.
        jq -r "$jqfilter" "${state_dir}/network_quality.json";
        return 0;
    else
        # Otherwise use 0 for all requested values, which will indicate network tests failed.
        echo '0';
        return 1;
    fi
}

function _convert_limit() {
    local limit=$1 metric=$2 arg=$3;
    # Convert UL and DL limits specified as a percentage into Mbps limits.
    if [[ $limit == *% ]]; then
        limit=$(bc <<<"scale=4; $(_network_quality "$metric") * ${limit//%} / 100 / 1024 / 1024");
    fi
    # If UL or DL limit is specified, convert from Mbps to KiB/s and return.
    if [[ -n $limit && $limit != 0 ]]; then
        echo -n "${arg}=$(bc <<<"scale=0; $limit * 1024 / 8")";
    fi
}

function _reliable_internet() {
    local ul_responsiveness dl_throughput ul_throughput;
    ul_responsiveness=$(_network_quality .ul_responsiveness || echo 0);
    dl_throughput=$(_network_quality .dl_throughput || echo 0);
    ul_throughput=$(_network_quality .ul_throughput || echo 0);
    # Return true if the network has an RPM < 50, DL < 0.5Mbps, or UL < 0.5Mbps.
    (( ul_responsiveness > 50 && dl_throughput > 524288 && ul_throughput > 524288 ));
}

function _computer_has_been_idle() {
    # Return true if the most recent successful back up began after the computer became idle.
    local last_backup_time_file=$1 idle_seconds idle_begin_time last_backup_time;

    type -P ioreg >/dev/null || return 1;
    [[ -s "$last_backup_time_file" ]] || return 1;
    idle_seconds=$(ioreg -c IOHIDSystem | awk '/HIDIdleTime/ {print $NF/1000000000; exit}' || true);
    idle_begin_time=$(bc <<<"scale=0; (${script_start_time} - ${idle_seconds:-0}) / 1");
    last_backup_time=$(<"$last_backup_time_file");

    (( last_backup_time > idle_begin_time ));
}

# Return true if on macOS battery power.
function _on_battery_power() {
    local output;
    type -P pmset >/dev/null || return 1;
    output=$(pmset -g batt);
    [[ "$output" == *"Now drawing from 'Battery Power'"* ]];
}

# Return true if connected to an iOS Personal Hotspot (which seems to reliably assign an IP address in the 172.20.10.xxx range).
function _connected_to_hotspot() {
    local output;
    type -P networksetup >/dev/null || return 1;
    output=$(networksetup -listallnetworkservices | grep -v '\*' | tr '\n' '\0' | xargs -0 -n 1 networksetup -getinfo 2>&1);
    [[ "$output" == *"IP address: 172.20.10."* ]];
}

# Detect if any RESTIC processes are running on this computer. If no processes are running, returns an empty string. If any processes end with the word RESTIC. Return the command names enclosed in quotes and comma separated.
function _running_restic_processes() {
    # shellcheck disable=SC2009
    ps -Ao command 2>/dev/null | grep '^[/a-z]*restic ' | awk 'NF{printf "%s“%s”", sep, $0; sep=", "}' 2>/dev/null || true;
}

function _repository_is_locked() {
    local command=$1 lock_ids restic_process;

    lock_ids=$(restic -q --no-lock list locks 2>/dev/null || true);
    [[ -z "$lock_ids" ]] && return 1; # Not locked

    # Check if restic process is currently running on local computer.
    restic_process=$(_running_restic_processes);
    if [[ -n $restic_process ]]; then
        _warning "Skipping ${command} because repository is locked (restic process: ${restic_process})";
        return 0; # Locked, not stale.
    fi

    # Loop through all locks and exit on the first non-stale lock.
    local lock_id lock_json lock_exclusive lock_hostname lock_username lock_time lock_age_seconds;
    while IFS= read -r lock_id; do
        [[ -n "$lock_id" ]] || continue;
        lock_json=$(restic --json -q --no-lock cat lock "$lock_id" 2>/dev/null || false) || continue;

        # The most common case is restic backup with all non-exclusive locks.
        # In a healthy repository, all lock types will be the same.
        lock_exclusive=$(jq -r '.exclusive // "false"' <<<"$lock_json" 2>/dev/null || echo 'false');
        if [[ $command == 'backup' && $lock_exclusive == 'false' ]]; then
            return 1; # Locked, but backup may proceed with non-exclusive lock.
        fi

        # From here: $command requires an exclusive lock, or an exclusive lock was encountered.

        # Terminate if a lock has a hostname != the local computer.
        lock_hostname=$(jq -r '.hostname // empty' <<<"$lock_json" 2>/dev/null || true);
        if [[ -z "$lock_hostname" || "$lock_hostname" != "$(hostname)" ]]; then
            _warning "Skipping ${command} because repository is locked (lock hostname: ${lock_hostname})";
            return 0; # Locked, not stale.
        fi

        # Terminate if a lock has a username != the local user.
        lock_username=$(jq -r '.username // empty' <<<"$lock_json" 2>/dev/null || true);
        if [[ -z "$lock_username" || "$lock_username" != "$(whoami)" ]]; then
            _warning "Skipping ${command} because repository is locked (lock username: ${lock_username})";
            return 0; # Locked, not stale.
        fi

        # Terminate if a lock has a lock age is less than 24 hours.
        lock_time=$(jq -r '.time // empty' <<<"$lock_json" 2>/dev/null || true);
        lock_time=${lock_time%%.*};
        lock_time=${lock_time/T/ };
        lock_age_seconds=$(( $(date +%s) - $(date -d "$lock_time" +%s 2>/dev/null || date -j -f "%Y-%m-%d %H:%M:%S" "$lock_time" +%s 2>/dev/null || echo 0) ));
        if [[ -z $lock_age_seconds || $lock_age_seconds -lt 86400 ]]; then
            _warning "Skipping ${command} because repository is locked (lock age: ${lock_age_seconds}s)";
            return 0; # Locked, not stale.
        fi
    done <<<"$lock_ids";

    # If auto-unlock is not enabled, log a warning with instructions to manually unlock the repo.
    if [[ -z $allow_auto_unlock ]]; then
        _warning "Skipping ${command} because repository is locked (run \`source \"$config_file\" && restic unlock\` after confirming no restic processes are running)";
        return 0;
    fi

    _warning "Repository lock is stale; attempting auto-unlock…";
    _restic_unlock;
    return 1; # Unlocked.
}

function _restic_unlock() {
    if ! _online; then
        _info "Skipping unlock because network is offline";
        return 1;
    fi

    _info "Unlocking restic repository";
    # shellcheck disable=SC2086
    $dryrunexec $caffeinate restic $quiet $verbose unlock 2>&1 | tee -a "$log_file";

    local restic_exit_status=${PIPESTATUS[0]};
    ((restic_exit_status == 0)) || _error "Failed to unlock (exit status ${restic_exit_status})";
}

function _restic_backup() {
    local last_backup_time_file;
    last_backup_time_file="${state_dir}/last-backup-time-$(LC_ALL=C tr -c '0-9A-Za-z\n' - <<<"$*")";

    if [[ -s "$last_backup_time_file" && $(<"$last_backup_time_file") -gt $((script_start_time - (60 * 60 * backup_interval_hours))) ]]; then
        _info "Skipping back up (last ran $(bc <<<"scale=1; (${script_start_time} - $(<"$last_backup_time_file")) / 60 / 60") hours ago)";
        return 1;
    fi

    if [[ -n $do_check_idle ]] && _computer_has_been_idle "$last_backup_time_file"; then
        _info "Skipping back up because computer has been idle since last back up";
        return 1;
    fi

    if [[ -n $do_check_battery ]] && _on_battery_power; then
        _info "Skipping back up while on battery";
        return 1;
    fi

    if [[ -n $do_check_hotspot ]] && _connected_to_hotspot; then
        _info "Skipping back up while connected to hotspot";
        return 1;
    fi

    if ! _online; then
        _info "Aborting back up because network is offline";
        exit 0;
    fi

    if [[ -n $do_check_internet ]] && ! _reliable_internet; then
        _info "Aborting back up because of unreliable internet";
        exit 1;
    fi

    _repository_is_locked backup && return 1;

    # Send “start” signal to HealthChecks.io when run via cron, if it hasn't been sent yet.
    if [[ -z $dryrun && $TERM == 'dumb' && -n ${HEALTHCHECKS_URL:-} && -z $sent_healthchecks_start ]]; then
        curl -fsS -A "$(hostname -s)" -X POST --data-binary "Starting back up of $*" --retry 3 "${HEALTHCHECKS_URL}/start" >/dev/null || true;
        sent_healthchecks_start=1;
    fi

    # Create a “canary” file in the first path argument. A canary file is 1KB of random data which is used to test restore.
    if [[ -d "$1" && -w "$1" && -r /dev/urandom ]]; then
        mkdir -p "${1}/.restickler-canary" "${tmp_dir}/restickler/restore/${1}/.restickler-canary" || _error "Failed to create temporary directories: \`${1}/.restickler-canary\`, \`${tmp_dir}/restickler/restore/${1}/.restickler-canary\`";
        find "${1}/.restickler-canary" "${tmp_dir}/restickler/restore/${1}/.restickler-canary" -type f -delete 2>/dev/null || true;
        canary_file="${1}/.restickler-canary/$(TZ=UTC date '+%FT%H%M%SZ')";
        head -c 1024 /dev/urandom > "$canary_file";
    fi

    _info "Starting back up of $*";
    local limit_download limit_upload;
    limit_download=$(_convert_limit "$dl_limit" ".dl_throughput" "--limit-download");
    limit_upload=$(_convert_limit "$ul_limit" ".ul_throughput" "--limit-upload");
    # shellcheck disable=SC2086
    [[ -n $dryrun ]] && $dryrunexec $caffeinate restic $quiet $verbose $limit_download $limit_upload backup "$@" \
        $exclude_file \
        $dryrun;
    # shellcheck disable=SC2086
    $caffeinate restic $quiet $verbose $limit_download $limit_upload backup "$@" \
        $exclude_file \
        $dryrun \
        2>&1 | { grep -v '^unchanged' || true; } | tee -a "$log_file" | { grep -Ev '^(modified|new)' || true; };

    local restic_exit_status=${PIPESTATUS[0]};
    ((restic_exit_status == 0)) || _error "Failed to back up (exit status ${restic_exit_status})";

    # Save the timestamp of when this script began running to the `last-backup-time-…` file.
    [[ -z $dryrun ]] && echo -n "$script_start_time" >| "$last_backup_time_file";

    return 0;
}

function _restic_test_restore() {
    if [[ -z $canary_file || ! -s "$canary_file" ]]; then
        _warning "Unable to test restore on $1 (canary file not found)";
        return 1;
    fi
    _info "Starting test restore";
    local latest_snapshot='';
    [[ -n $dryrun ]] || latest_snapshot=$(restic --no-lock snapshots --json --path "$1" latest | jq -re '.[0].short_id' || _error "Failed to find a snapshot with the canary file");
    # shellcheck disable=SC2086
    $dryrunexec $caffeinate restic $quiet $verbose restore "$latest_snapshot" \
        --target "${tmp_dir}/restickler/restore" \
        --include "$canary_file" \
        2>&1 | tee -a "$log_file" | { grep -v '^restoring' || true; };

    local restic_exit_status=${PIPESTATUS[0]};
    ((restic_exit_status == 0)) || _error "Failed to restore (exit status ${restic_exit_status})";

    [[ -n $dryrun ]] || diff "$canary_file" "${tmp_dir}/restickler/restore/${canary_file}" >/dev/null || _error "Restored canary ${canary_file} doesn’t match backed-up version"

    return 0;
}

function _restic_forget() {
    if [[ -s "${state_dir}/last-forget-time" && $(<"${state_dir}/last-forget-time") -gt $((script_start_time - (60 * 60 * forget_interval_hours))) ]]; then
        _info "Skipping forget (last ran $(bc <<<"scale=1; (${script_start_time} - $(<"${state_dir}/last-forget-time")) / 60 / 60") hours ago)";
        return 1;
    fi

    if [[ -n $do_check_hotspot ]] && _connected_to_hotspot; then
        _info "Skipping forget while connected to hotspot";
        return 1;
    fi

    if ! _online; then
        _info "Aborting forget because network is offline";
        exit 0;
    fi

    if [[ -n $do_check_internet ]] && ! _reliable_internet; then
        _info "Aborting forget because of unreliable internet";
        exit 1;
    fi

    _repository_is_locked forget && return 1;

    # Send “start” signal to HealthChecks.io when run via cron, if it hasn't been sent yet.
    if [[ -z $dryrun && $TERM == 'dumb' && -n ${HEALTHCHECKS_URL:-} && -z $sent_healthchecks_start ]]; then
        curl -fsS -A "$(hostname -s)" -X POST --data-binary "Starting forget" --retry 3 "${HEALTHCHECKS_URL}/start" >/dev/null || true;
        sent_healthchecks_start=1;
    fi

    _info "Starting forget";
    local limit_download limit_upload;
    limit_download=$(_convert_limit "$dl_limit" ".dl_throughput" "--limit-download");
    limit_upload=$(_convert_limit "$ul_limit" ".ul_throughput" "--limit-upload");
    # shellcheck disable=SC2086
    $caffeinate restic $quiet $verbose $limit_download $limit_upload forget \
        --keep-last 72 \
        --keep-within-hourly 14d \
        --keep-within-daily 45d \
        --keep-within-weekly 3m \
        --keep-within-monthly 1y \
        --keep-within-yearly 10y \
        $dryrun \
        2>&1 | tee -a "$log_file";

    local restic_exit_status=${PIPESTATUS[0]};
    ((restic_exit_status == 0)) || _error "Failed to forget (exit status ${restic_exit_status})";

    # Save the timestamp of successful forget.
    [[ -z $dryrun ]] && echo -n "$script_start_time" >| "${state_dir}/last-forget-time";

    return 0;
}

function _restic_prune() {
    if [[ -s "${state_dir}/last-prune-time" && $(<"${state_dir}/last-prune-time") -gt $((script_start_time - (60 * 60 * prune_interval_hours))) ]]; then
        _info "Skipping prune (last ran $(bc <<<"scale=1; (${script_start_time} - $(<"${state_dir}/last-prune-time")) / 60 / 60") hours ago)";
        return 1;
    fi

    if [[ -n $do_check_battery ]] && _on_battery_power; then
        _info "Skipping prune while on battery";
        return 1;
    fi

    if [[ -n $do_check_hotspot ]] && _connected_to_hotspot; then
        _info "Skipping prune while connected to hotspot";
        return 1;
    fi

    if ! _online; then
        _info "Aborting prune because network is offline";
        exit 0;
    fi

    if [[ -n $do_check_internet ]] && ! _reliable_internet; then
        _info "Aborting prune because of unreliable internet";
        exit 1;
    fi

    _repository_is_locked prune && return 1;

    # Send “start” signal to HealthChecks.io when run via cron, if it hasn't been sent yet.
    if [[ -z $dryrun && $TERM == 'dumb' && -n ${HEALTHCHECKS_URL:-} && -z $sent_healthchecks_start ]]; then
        curl -fsS -A "$(hostname -s)" -X POST --data-binary "Starting prune" --retry 3 "${HEALTHCHECKS_URL}/start" >/dev/null || true;
        sent_healthchecks_start=1;
    fi

    _info "Starting prune";
    local limit_download limit_upload;
    limit_download=$(_convert_limit "$dl_limit" ".dl_throughput" "--limit-download");
    limit_upload=$(_convert_limit "$ul_limit" ".ul_throughput" "--limit-upload");
    # shellcheck disable=SC2086
    $caffeinate restic $quiet $verbose $limit_download $limit_upload prune \
        $dryrun \
        2>&1 | tee -a "$log_file";

    local restic_exit_status=${PIPESTATUS[0]};
    ((restic_exit_status == 0)) || _error "Failed to prune (exit status ${restic_exit_status})";

    # Save the timestamp of successful prune.
    [[ -z $dryrun ]] && echo -n "$script_start_time" >| "${state_dir}/last-prune-time";

    return 0;
}

function _restic_check() {
    if [[ -s "${state_dir}/last-check-time" && $(<"${state_dir}/last-check-time") -gt $((script_start_time - (60 * 60 * check_interval_hours))) ]]; then
        _info "Skipping check (last ran $(bc <<<"scale=1; (${script_start_time} - $(<"${state_dir}/last-check-time")) / 60 / 60") hours ago)";
        return 1;
    fi

    if [[ -n $do_check_battery ]] && _on_battery_power; then
        _info "Skipping check while on battery";
        return 1;
    fi

    if [[ -n $do_check_hotspot ]] && _connected_to_hotspot; then
        _info "Skipping check while connected to hotspot";
        return 1;
    fi

    if ! _online; then
        _info "Aborting check because network is offline";
        exit 0;
    fi

    if [[ -n $do_check_internet ]] && ! _reliable_internet; then
        _info "Aborting check because of unreliable internet";
        exit 1;
    fi

    _repository_is_locked check && return 1;

    # Send “start” signal to HealthChecks.io when run via cron, if it hasn't been sent yet.
    if [[ -z $dryrun && $TERM == 'dumb' && -n ${HEALTHCHECKS_URL:-} && -z $sent_healthchecks_start ]]; then
        curl -fsS -A "$(hostname -s)" -X POST --data-binary "Starting check" --retry 3 "${HEALTHCHECKS_URL}/start" >/dev/null || true;
        sent_healthchecks_start=1;
    fi

    _info "Starting check";
    # Verify 1/12th of the total repo data every month.
    # Check might be redundant with `prune`, except for the doubt in this comment: https://forum.restic.net/t/should-i-run-restic-check/1227/9?u=quinncom
    local limit_download limit_upload;
    limit_download=$(_convert_limit "$dl_limit" ".dl_throughput" "--limit-download");
    limit_upload=$(_convert_limit "$ul_limit" ".ul_throughput" "--limit-upload");
    # shellcheck disable=SC2086
    $dryrunexec $caffeinate restic $quiet $verbose $limit_download $limit_upload check \
        --read-data-subset="$(date +%-m)/12" \
        2>&1 | tee -a "$log_file";

    local restic_exit_status=${PIPESTATUS[0]};
    ((restic_exit_status == 0)) || _error "Failed to check (exit status ${restic_exit_status})";

    # Save the timestamp of successful check.
    [[ -z $dryrun ]] && echo -n "$script_start_time" >| "${state_dir}/last-check-time";

    return 0;
}


#
# Get ready
#

# Display help if run without arguments.
[[ $# == 0 ]] && _usage;

# Test dependencies.
for requiredcmd in restic curl jq bc tr awk sed readlink curl; do
    type -P "$requiredcmd" >/dev/null || _error "The '$requiredcmd' command is not available";
done

restic_min_version='0.14.0';
restic_installed_version=$(restic version | awk '{print $2}');
if [[ "$restic_min_version" != "$(echo -e "${restic_installed_version}\n${restic_min_version}" | sort -V | head -1)" ]]; then
    _error "This script requires restic >= $restic_min_version (installed version is ${restic_installed_version}). Upgrade with: \`$(readlink -f "$(which restic)") self-update\`.";
fi

caffeinate=''; # caffeinate is only available on macOS.
# shellcheck disable=SC2015
type -P caffeinate >/dev/null && caffeinate='caffeinate -i' || true;

# Process command line options.
while getopts "ABb:C:c:d:e:f:HhInp:qt:u:Vv-:" opt; do
    case $opt in
        (A) do_check_idle=1;;
        (b) backup_interval_hours=${OPTARG%.*};; # Args with hours need to be integers.
        (B) do_check_battery=1;;
        (c) check_interval_hours=${OPTARG%.*};;
        (C) config_file=$OPTARG;;
        (d) dl_limit=$OPTARG;;
        (e) exclude_file=$OPTARG;;
        (f) forget_interval_hours=${OPTARG%.*};;
        (H) do_check_hotspot=1;;
        (h) _usage;;
        (I) do_check_internet=1;;
        (n) dryrun='--dry-run'; dryrunexec='echo DRY-RUN:';;
        (p) prune_interval_hours=${OPTARG%.*};;
        (q) quiet="--quiet";;
        (t) IFS=',' read -ra tasks <<<"$OPTARG";;
        (u) ul_limit=$OPTARG;;
        (V) echo "restickler ${restickler_version} ($(type -P restic >/dev/null && restic version))"; exit 0;;
        (v) verbose="-v ${verbose}";;
        (-) case $OPTARG in
            (allow-auto-unlock) allow_auto_unlock=1;;
            (help) _usage;;
            (install-config) _install_config;;
            (self-update) _self_update;;
            (version) echo "restickler ${restickler_version} ($(type -P restic >/dev/null && restic version))"; exit 0;;
            (*) _error "Invalid option: \`--${OPTARG}\`. Use -h for help.";;
        esac ;;
        (?) _error "Invalid option: \`${opt}\`. Use -h for help.";;
        (*) _error "An unexpected error occurred.";;
    esac
done
shift $((OPTIND - 1));

(($# == 0)) && _error "No source path provided to back up";
[[ $config_file == "${config_dir}/env" || -f $config_file ]] || _error "Failed to find env config file: ${config_file}";
if [[ -n $exclude_file ]]; then
    [[ -f $exclude_file ]] || _error "Failed to find exclude file: ${exclude_file}";
    exclude_file="--exclude-file=${exclude_file}";
fi
[[ -z $dl_limit || $dl_limit =~ ^[0-9]+(\.[0-9]+)?%?$ ]] || _error "Download speed limit must be a number (e.g., \`-d 10.5\`) or a percentage (e.g., \`-d 75%\`).";
[[ -z $ul_limit || $ul_limit =~ ^[0-9]+(\.[0-9]+)?%?$ ]] || _error "Upload speed limit must be a number (e.g., \`-u 10.5\`) or a percentage (e.g., \`-u 75%\`).";
[[ $backup_interval_hours =~ ^[0-9]+$ ]] || _error "Backup interval must be an integer (e.g., \`-b 1\`).";
[[ $check_interval_hours =~ ^[0-9]+$ ]]  || _error "Check interval must be an integer (e.g., \`-c 720\`).";
[[ $forget_interval_hours =~ ^[0-9]+$ ]] || _error "Forget interval must be an integer (e.g., \`-f 24\`).";
[[ $prune_interval_hours =~ ^[0-9]+$ ]]  || _error "Prune interval must be an integer (e.g., \`-p 240\`).";

# Use the default tasks if none were submitted by the user.
[[ ${#tasks[@]} -eq 0 ]] && tasks=("${tasks_default[@]}");
# Verify user-submitted tasks are valid by comparing them to the list of default tasks.
for t in "${tasks[@]}"; do
    invalid_task=1;
    for td in "${tasks_default[@]}"; do
        [[ "$t" == "$td" ]] && { invalid_task=0; break; };
    done;
    [[ $invalid_task -eq 0 ]] || _error "Invalid task: $t";
done;

# Additional arguments are backup sources. Verify them.
for src in "$@"; do
    [[ $src =~ ^/ ]] || _error "Source directory “${src}” must be an absolute path";
    [[ -z $src || ! -d "$src" ]] && _error "Source directory “${src}” doesn’t exist";
done

# Enforce single-instance execution (via mkdir, which creates atomic lock and check at once).
# A design goal of restickler is to complete its tasks as quickly as possible. As such, we want to avoid resource contention.
# Use of --dry-run has a different lock file (/tmp/restickler/lock--dry-run) to allow testing while backups may be in process.
mkdir "${tmp_dir}/restickler/lock${dryrun}" 2>/dev/null || {
    _info "Another restickler process is running (lock exists; restic process: $(_running_restic_processes)).";
    exit 1;
};

# Internet speed test results are regenerated each time restickler runs.
rm -f "${state_dir}/network_quality.json";

function _trap() {
    local status=$? sig=$1 line=$2;
    case $sig in
        (HUP) _info "Received SIGHUP; continuing anyways…";;
        (INT|TERM) _restic_unlock; _error "Restickler terminated via ${sig}";;
        (ERR) _error "Exit status ${status} on line ${line}: \`${BASH_COMMAND}\`";;
        # Trap EXIT must occur after the lock test, otherwise the exit would remove the lock used by the other process.
        (EXIT)
            rm -fr "${tmp_dir}/restickler/lock${dryrun}";
            local canary_dir;
            canary_dir=$(dirname "$canary_file");
            [[ $canary_dir == */.restickler-canary ]] && rm -fr "$canary_dir" || true;
            ;;
        (*) _error "Unhandled signal ${sig} with status ${status} on line ${line}";;
    esac
}
trap '_trap HUP $LINENO' HUP;
trap '_trap INT $LINENO' INT;
trap '_trap TERM $LINENO' TERM;
trap '_trap ERR $LINENO' ERR;
trap '_trap EXIT $LINENO' EXIT;

# Load environment variables used by restic and restickler.
# shellcheck disable=SC1090
[[ -f "$config_file" && -r "$config_file" ]] && source "$config_file";
if [[ -z ${RESTIC_REPOSITORY:-} || ( -z ${RESTIC_PASSWORD_COMMAND:-} && -z ${RESTIC_PASSWORD:-} ) ]]; then
    _error "Missing restic environment variable(s): RESTIC_REPOSITORY and/or RESTIC_PASSWORD_COMMAND; see https://restic.readthedocs.io/en/latest/040_backup.html#environment-variables";
fi

if ! _online; then
    _info "Aborting because network is offline";
    exit 0;
fi

# Make sure the remote repository exists.
if ! restic --no-lock snapshots >/dev/null; then
    _warning "Failed to connect to repository ${RESTIC_REPOSITORY}";
    exit 0;
fi

#
# Go!
#

_info "Starting restickler $* to ${RESTIC_REPOSITORY}";

completed_tasks=();
_todo backup && _restic_backup "${@%/}" && completed_tasks+=('back up') && _todo restore && _restic_test_restore "${@%/}" && completed_tasks+=('test restore');
_todo forget && _restic_forget && completed_tasks+=('forget');
_todo prune && _restic_prune && completed_tasks+=('prune');
_todo check && _restic_check && completed_tasks+=('check');

# Format a string of tasks that completed successfully.
case ${#completed_tasks[@]} in
    (0) completed_tasks_list='0 tasks';;
    (1) completed_tasks_list="1 task: ${completed_tasks[*]}";;
    (*) completed_tasks_list="${#completed_tasks[@]} tasks: $(printf '%s, ' "${completed_tasks[@]}")";;
esac
_info "Finished ${completed_tasks_list%, } ($(_elapsed) elapsed)";

# Send “success” signal to HealthChecks.io when run via cron, but only if a /start ping was sent (which only occurs when a main action begins, i.e., back up, forget, prune, or check).
# shellcheck disable=SC2015
if [[ -z $dryrun && $TERM == 'dumb' && -n ${HEALTHCHECKS_URL:-} && -n $sent_healthchecks_start ]]; then
    curl -fsS -A "$(hostname -s)" -X POST --data-binary "Finished ${completed_tasks_list%, } on $* ($(_elapsed) elapsed)" --retry 3 "$HEALTHCHECKS_URL" >/dev/null || true;
fi
